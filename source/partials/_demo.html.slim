section.demo
  .content-wrapper
    h3.demo__heading.section-heading See some examples
    .vertical-tabs-container
      .vertical-tabs
        a.js-vertical-tab.vertical-tab.is-active(href="javascript:void(0)" rel="tab1") Simple Queries
        a.js-vertical-tab.vertical-tab(href="javascript:void(0)" rel="tab2") Complex Queries
        a.js-vertical-tab.vertical-tab(href="javascript:void(0)" rel="tab3") Less Boilerplate
        a.js-vertical-tab.vertical-tab(href="javascript:void(0)" rel="tab4") Inserting Data
        a.js-vertical-tab.vertical-tab(href="javascript:void(0)" rel="tab5") Updating Data

      .vertical-tab-content-container
        a.js-vertical-tab-accordion-heading.vertical-tab-accordion-heading.is-active(href="javascript:void(0)" rel="tab1") Simple Queries
        #tab1.js-vertical-tab-content.vertical-tab-content
          .demo__example
            p.demo__example-caption
              | Simple queries are a complete breeze.
                Loading all users from a database:
            .demo__example-browser
              .browser-bar Rust code
              pre.demo__example-snippet
                code users::table.load(&connection)
            .demo__example-browser
              .browser-bar Executed SQL
              pre.demo__example-snippet
                code SELECT * FROM users;

            p.demo__example-caption
              | Loading all the posts for a user:
            .demo__example-browser
              .browser-bar Rust code
              pre.demo__example-snippet
                code Post::belonging_to(user).load(&connection)
            .demo__example-browser
              .browser-bar Executed SQL
              pre.demo__example-snippet
                code SELECT * FROM posts WHERE user_id = 1;

        a.js-vertical-tab-accordion-heading.vertical-tab-accordion-heading(href="javascript:void(0)" rel="tab2") Complex Queries
        #tab2.js-vertical-tab-content.vertical-tab-content
          .demo__example
            p.demo__example-caption
              | Diesel's powerful query builder helps you construct queries as
                simple or complex as you need, at 0 cost.
            .demo__example-browser
              .browser-bar Rust code
              pre.demo__example-snippet
                code
                  | let versions = Version::belonging_to(krate)
                      .select(id)
                      .order(num.desc())
                      .limit(5);
                    let downloads = try!(version_downloads
                      .filter(date.gt(now - 90.days()))
                      .filter(version_id.eq(any(versions)))
                      .order(date) // asc by default, desc with date.desc()
                      .load::&lt;Download&gt;(&conn));
            .demo__example-browser
              .browser-bar Executed SQL
              pre.demo__example-snippet
                code
                  | SELECT version_downloads.*
                      WHERE date > (NOW() - '90 days')
                        AND version_id = ANY(
                          SELECT id FROM versions
                            WHERE crate_id = 1
                            ORDER BY num DESC
                            LIMIT 5
                        )
                      ORDER BY date

        a.js-vertical-tab-accordion-heading.vertical-tab-accordion-heading(href="javascript:void(0)" rel="tab3") Less Boilerplate
        #tab3.js-vertical-tab-content.vertical-tab-content
          .demo__example
            p.demo__example-caption
              | Diesel codegen generates boilerplate for you. It lets you focus
                on your business logic, not mapping to and from SQL rows.

            p.demo__example-caption That means you can write this:

            .demo__example-browser
              .browser-bar With Diesel
              pre.demo__example-snippet
                code.rust
                  | #[derive(Queryable)]
                    pub struct Download {
                        id: i32,
                        version_id: i32,
                        downloads: i32,
                        counted: i32,
                        date: SystemTime,
                    }

            p.demo__example-caption
              | Instead of this:

            .demo__example-browser
              .browser-bar Without Diesel
              pre.demo__example-snippet
                code
                  | pub struct Download {
                        id: i32,
                        version_id: i32,
                        downloads: i32,
                        counted: i32,
                        date: SystemTime,
                    }

                    impl Download {
                        fn from_row(row: &Row) -> Download {
                            Download {
                                id: row.get("id"),
                                version_id: row.get("version_id"),
                                downloads: row.get("downloads"),
                                counted: row.get("counted"),
                                date: row.get("date"),
                            }
                        }
                    }

        a.js-vertical-tab-accordion-heading.vertical-tab-accordion-heading(href="javascript:void(0)" rel="tab4") Inserting Data
        #tab4.js-vertical-tab-content.vertical-tab-content
          .demo__example
            p.demo__example-caption
              | It's not just about reading data. Diesel makes it easy to
                use structs for new records.
            .demo__example-browser
              .browser-bar Rust code
              pre.demo__example-snippet
                code
                  | #[derive(Insertable)]
                    #[table_name="users"]
                    struct NewUser<'a> {
                        name: &'a str,
                        hair_color: Option<&'a str>,
                    }

                    let new_users = vec![
                        NewUser { name: "Sean", hair_color: Some("Black") },
                        NewUser { name: "Gordon", hair_color: None },
                    ];
                    insert(&new_users).into(users::table)
                        .execute(&connection);
            .demo__example-browser
              .browser-bar Executed SQL
              pre.demo__example-snippet
                code
                  | INSERT INTO users (name, hair_color) VALUES
                      ('Sean', 'Black'),
                      ('Gordon', DEFAULT)
            p.demo__example-caption
              | If you need data from the rows you inserted, just change
                `execute` to `get_result` or `get_results`. Diesel will take
                care of the rest.
            .demo__example-browser
              .browser-bar Rust code
              pre.demo__example-snippet
                code
                    | let new_users = vec![
                          NewUser { name: "Sean", hair_color: Some("Black") },
                          NewUser { name: "Gordon", hair_color: None },
                      ];
                      let inserted_users = insert(&new_users).into(users::table)
                          .get_results::&lt;User&gt;(&connection);
            .demo__example-browser
              .browser-bar Executed SQL
              pre.demo__example-snippet
                code
                  | INSERT INTO users (name, hair_color) VALUES
                      ('Sean', 'Black'),
                      ('Gordon', DEFAULT)
                      RETURNING *

        a.js-vertical-tab-accordion-heading.vertical-tab-accordion-heading(href="javascript:void(0)" rel="tab5") Updating Data
        #tab5.js-vertical-tab-content.vertical-tab-content
          .demo__example
            p.demo__example-caption
              | Diesel's codegen can generate several ways to update a row,
                letting you encapsulate your logic in the way that makes sense
                for your app.
            .demo__example-browser
              .browser-bar Modifying a struct
              pre.demo__example-snippet
                code
                  | post.published = true;
                    post.save_changes(&connection);
            .demo__example-browser
              .browser-bar One-off batch changes
              pre.demo__example-snippet
                code
                  | update(users.filter(email.like("%@spammer.com")))
                        .set(banned.eq(true))
                        .execute(&connection)
            .demo__example-browser
              .browser-bar Using a struct for encapsulation
              pre.demo__example-snippet
                code
                  | update(Settings::belonging_to(current_user))
                        .set(&settings_form)
                        .execute(&connection)
